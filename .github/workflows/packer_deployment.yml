name: AWS Deployment
on:
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  aws-deployments:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    environment: Development
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      INSTANCE_TYPE: ${{ secrets.INSTANCE_TYPE }}
      KEY_NAME: ${{ secrets.KEY_NAME }}
      SECURITY_GROUP: ${{ secrets.SECURITY_GROUP }}
      AUTOSCALING_GROUP_NAME: ${{ secrets.AUTOSCALING_GROUP_NAME }}
      LAUNCH_TEMPLATE_NAME: ${{ secrets.LAUNCH_TEMPLATE_NAME }}
    steps:

      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create a new Launch Template Versions
        id: create_launch_template
        run: |
          NEW_AMI_ID=$(aws ec2 describe-images \
            --owners self amazon \
            --filters Name=name,Values="custom-ubuntu-*" \
            --query "Images | sort_by(@, &CreationDate)[-1].ImageId" --output text)
          
          echo "Using AMI: $NEW_AMI_ID"

          LAUNCH_TEMPLATE_VERSION=$(aws ec2 create-launch-template-version \
            --launch-template-name ${{ env.LAUNCH_TEMPLATE_NAME }} \
            --version-description "New deployment version" \
            --source-version '$Latest' \
            --launch-template-data "{\"ImageId\":\"$NEW_AMI_ID\"}" \
            --query 'LaunchTemplateVersion.VersionNumber' --output text)
          
          echo "::set-output name=template_version::$LAUNCH_TEMPLATE_VERSION"

      - name: Update Auto Scaling Group to use new Launch Template Version
        run: |
          LAUNCH_TEMPLATE_VERSION=$(aws ec2 describe-launch-template-versions \
            --launch-template-name "${{ env.LAUNCH_TEMPLATE_NAME }}" \
            --query "LaunchTemplateVersions | sort_by(@, &VersionNumber)[-1].VersionNumber" \
            --output text)
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name ${{ env.AUTOSCALING_GROUP_NAME }} \
            --launch-template "LaunchTemplateName=${{ env.LAUNCH_TEMPLATE_NAME }},Version=$LAUNCH_TEMPLATE_VERSION"

      - name: Start Instance Refresh
        id: start_refresh
        run: |
          REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name ${{ env.AUTOSCALING_GROUP_NAME }} \
            --preferences '{"MinHealthyPercentage": 90, "InstanceWarmup": 300}' \
            --query 'InstanceRefreshId' --output text)
          echo "::set-output name=refresh_id::$REFRESH_ID"

      - name: Wait for Instance Refresh to Complete
        run: |
          STATUS="Pending"
          while [[ "$STATUS" != "Successful" && "$STATUS" != "Failed" ]]; do
            STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name ${{ env.AUTOSCALING_GROUP_NAME }} \
              --query "InstanceRefreshes[?InstanceRefreshId=='${{ steps.start_refresh.outputs.refresh_id }}'].Status | [0]" --output text)
            echo "Current Status: $STATUS"
            if [[ "$STATUS" == "Failed" ]]; then
              echo "Instance refresh failed."
              exit 1
            fi
            sleep 30
          done
